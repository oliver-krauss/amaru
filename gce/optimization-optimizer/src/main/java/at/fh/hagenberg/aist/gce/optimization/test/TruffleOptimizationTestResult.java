/*
 * Copyright (c) 2022 the original author or authors.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 *
 */

package at.fh.hagenberg.aist.gce.optimization.test;

import at.fh.hagenberg.aist.gce.optimization.executor.TraceExecutionResult;
import at.fh.hagenberg.aist.gce.optimization.runtime.RuntimeProfile;
import org.neo4j.ogm.annotation.*;

import java.io.PrintWriter;
import java.io.StringWriter;

@NodeEntity
public class TruffleOptimizationTestResult {


    /**
     * Id generated by database
     */
    @Id
    private Long id;

    /**
     * The test this is a result for
     */
    @Relationship(type = "SOLVES_TEST", direction = Relationship.OUTGOING)
    private TruffleOptimizationTest test;

    /**
     * Time this test took to execute
     */
    @Relationship(type = "RUNTIME", direction = Relationship.OUTGOING)
    private RuntimeProfile runtime;

    @Relationship(type = "UNOPTIMIZED_RUNTIME", direction = Relationship.OUTGOING)
    private RuntimeProfile unoptimizedRuntime;

    /**
     * Exception that occurred when executing the test (ideally null)
     */
    private String exception;

    /**
     * Entire stack trace of exception
     */
    private String stackTrace;

    /**
     * Output of the test
     */
    @Relationship(type = "TEST_RESULT", direction = Relationship.OUTGOING)
    private TruffleTestValue output;

    /**
     * Trace result. Used to approximate the runtime performance
     */
    @Transient // as it is only used in cachets
    private TraceExecutionResult traceResult;

    public TruffleOptimizationTestResult() {
    }

    public TruffleOptimizationTestResult(TruffleOptimizationTest test, RuntimeProfile runtime, RuntimeProfile unoptimizedRuntime, String exception, TruffleTestValue output) {
        this.test = test;
        this.runtime = runtime;
        this.unoptimizedRuntime = unoptimizedRuntime;
        this.exception = exception;
        this.output = output;
    }

    public TruffleOptimizationTestResult(TruffleOptimizationTest test, RuntimeProfile runtime, RuntimeProfile unoptimizedRuntime, Throwable exception, TruffleTestValue output) {
        this.test = test;
        this.runtime = runtime;
        this.unoptimizedRuntime = unoptimizedRuntime;
        if (exception != null) {
            this.exception = exception.toString();
            StringWriter sw = new StringWriter();
            exception.printStackTrace(new PrintWriter(sw));
            stackTrace = sw.toString();
        } else {
            this.exception = null;
        }
        this.output = output;
    }

    public TruffleOptimizationTestResult(TruffleOptimizationTest test, RuntimeProfile runtime, RuntimeProfile unoptimizedRuntime, String exception, TruffleTestValue output, TraceExecutionResult traceResult) {
        this(test, runtime, unoptimizedRuntime, exception, output);
        this.traceResult = traceResult;
    }

    public TruffleOptimizationTestResult(TruffleOptimizationTest test, RuntimeProfile runtime, RuntimeProfile unoptimizedRuntime, Throwable exception, TruffleTestValue output, TraceExecutionResult traceResult) {
        this(test, runtime, unoptimizedRuntime, exception, output);
        this.traceResult = traceResult;
    }

    public TruffleOptimizationTest getTest() {
        return test;
    }

    public double getRuntime() {
        // We assume the MIN is the value we want to compare to. The argument for min is that this is the value
        // least influenced by outside components (other threads, hw interrupts, ...)
        return runtime.getMinimum();
    }

    public String getException() {
        return exception;
    }

    public TruffleTestValue getOutput() {
        return output;
    }

    /**
     * Checks if there was a critical failure during the run
     *
     * @return if the test did NOT finish
     */
    public boolean hasFailed() {
        return exception != null;
    }

    /**
     * Checks if the test was 100% correct
     *
     * @return if the output is what it should have been
     */
    public boolean solved() {
        return output.getValue() == null ? test.getOutputValue() == null : output.getValue().equals(test.getOutputValue());
    }

    /**
     * Checks if the test produced the correct result type
     *
     * @return if the output is at least the correct type
     */
    public boolean correctReturnType() {
        if (output.getValue() == null) {
            // if no value was returned but we want one -> The type is NOT correct as we can't check the type with null
            return test.getOutputValue() != null;
        } else {
            // if we can't check the return type we must assume it is the wrong one
            return output.getType() != null ? output.getType().equals(test.getOutput().getType()) : false;
        }
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public void setTest(TruffleOptimizationTest test) {
        this.test = test;
    }

    public void setOutput(TruffleTestValue output) {
        this.output = output;
    }

    public TraceExecutionResult getTraceResult() {
        return traceResult;
    }

    public String getStackTrace() {
        return stackTrace;
    }

    public RuntimeProfile getRuntimeProfile() {
        return runtime;
    }

    public RuntimeProfile getUnoptimizedRuntime() {
        return unoptimizedRuntime;
    }
}
